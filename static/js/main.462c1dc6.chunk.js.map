{"version":3,"sources":["components/heading.js","components/form.js","components/forecast.js","App.js","index.js"],"names":["Heading","prop","Form","props","onSubmit","loadWeather","type","name","placeholder","Forecast","country","city","temperature","humidity","pressure","icon","src","alt","description","error","api_key","App","state","getWeather","e","a","target","elements","value","preventDefault","fetch","api_call","json","response","setState","main","temp","sys","weather","alert","console","log","className","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAaeA,G,MAXA,SAACC,GACZ,OACI,6BACI,kDACA,yFCQGC,EAZF,SAACC,GACV,OACI,0BAAMC,SAAYD,EAAME,aACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,kBAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,qBAC9C,iDCaGC,EAlBE,SAACN,GACd,OACI,6BACKA,EAAMO,SAAWP,EAAMQ,MAAQ,yCAAeR,EAAMQ,KAArB,KAA6BR,EAAMO,SAClEP,EAAMS,aAAe,2CAAiBT,EAAMS,aAC5CT,EAAMU,UAAY,yCAAeV,EAAMU,UACvCV,EAAMW,UAAY,yCAAeX,EAAMW,UACvCX,EAAMY,MAAQ,yBAAKC,IAAG,2CAAsCb,EAAMY,KAA5C,QAAwDE,IAAK,iBACnFd,EAAMe,aAAe,2CAAiBf,EAAMe,aAC5Cf,EAAMgB,OAAS,2BAAIhB,EAAMgB,SCJhCC,EAAU,mCA+DDC,E,4MA3DbC,MAAQ,CACNV,YAAa,GACbD,KAAM,GACND,QAAS,GACTG,SAAU,GACVC,SAAU,GACVC,KAAM,GACNG,YAAa,GACbC,MAAO,I,EAGRI,W,uCAAa,WAAOC,GAAP,qBAAAC,EAAA,6DACLd,EAAOa,EAAEE,OAAOC,SAAShB,KAAKiB,MAC9BlB,EAAUc,EAAEE,OAAOC,SAASjB,QAAQkB,MAC1CJ,EAAEK,iBAHS,SAKYC,MAAM,qDAAD,OAAsDnB,EAAtD,YAA8DD,EAA9D,iCAA8FU,IAL/G,cAKLW,EALK,yBAOYA,EAASC,OAPrB,OAOLC,EAPK,OAQRtB,GAAQD,GACT,EAAKwB,SAAS,CACZtB,YAAaqB,EAASE,KAAKC,KAC3BzB,KAAMsB,EAAS1B,KACfG,QAASuB,EAASI,IAAI3B,QACtBG,SAAUoB,EAASE,KAAKtB,SACxBC,SAAUmB,EAASE,KAAKrB,SACxBC,KAAMkB,EAASK,QAAQ,GAAGvB,KAC1BG,YAAae,EAASK,QAAQ,GAAGpB,YACjCC,MAAO,KAjBA,yDAsBZoB,MAAM,wBAtBM,kBAuBLC,QAAQC,IAAR,OAvBK,0D,6GA6BZ,OACA,yBAAKC,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACf,kBAAC,EAAD,CAAMrC,YAAasC,KAAKpB,cACxB,kBAAC,EAAD,CACAX,YAAa+B,KAAKrB,MAAMV,YACxBD,KAAMgC,KAAKrB,MAAMX,KACjBD,QAASiC,KAAKrB,MAAMZ,QACpBG,SAAU8B,KAAKrB,MAAMT,SACrBC,SAAU6B,KAAKrB,MAAMR,SACrBC,KAAM4B,KAAKrB,MAAMP,KACjBG,YAAayB,KAAKrB,MAAMJ,YACxBC,MAAOwB,KAAKrB,MAAMH,a,GAvDNyB,IAAMC,WCHxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.462c1dc6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading =(prop) => {\r\n    return(\r\n        <div>\r\n            <h1>How's the Weather?</h1>\r\n            <h3>Find out what the weather conditions are in your city.</h3>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return(\r\n        <form onSubmit = {props.loadWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"Choose a City\"/>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Choose a Country\" />\r\n            <button>Get Weather</button> \r\n        </form>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Form;\r\n//the button triggers the api call","import React from 'react';\r\n\r\nconst Forecast = (props) => {\r\n    return(                  //name of the props I'm grabbing from api to display to browser\r\n        <div>\r\n            {props.country && props.city && <p>Location:  {props.city}, {props.country}</p>}\r\n            {props.temperature && <p>Temperature: {props.temperature}</p>}\r\n            {props.humidity && <p>Humidity:  {props.humidity}</p>}\r\n            {props.pressure && <p>Pressure:  {props.pressure}</p>}\r\n            {props.icon && <img src={`http://openweathermap.org/img/wn/${props.icon}.png`} alt= \"weather icon\"/> }\r\n            {props.description && <p>Conditions:  {props.description}</p>}\r\n            {props.error && <p>{props.error}</p>}\r\n         </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Forecast;","import React from 'react';\nimport './App.css';\nimport Heading from \"./components/heading.js\";\nimport Form from \"./components/form.js\";\nimport Forecast from \"./components/forecast.js\";\n\n\nconst api_key = \"c947bff56ae5911bc4532e0f0849eb41\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    pressure: \"\",\n    icon: \"\",\n    description: \"\",\n    error: \"\"\n  }\n\n   getWeather = async (e) => {\n     const city = e.target.elements.city.value;\n     const country = e.target.elements.country.value;\n     e.preventDefault();\n     \n     const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&APPID=${api_key}`)\n     try {\n     const response = await api_call.json(); //if city and state are inputted correctly then ..\n     if(city && country) {\n       this.setState({\n         temperature: response.main.temp, //main.temp was the name of the parameter in the api\n         city: response.name,\n         country: response.sys.country,\n         humidity: response.main.humidity,\n         pressure: response.main.pressure,\n         icon: response.weather[0].icon, //will have an array of different icons so set it to [0]\n         description: response.weather[0].description, //will have an array of different descriptions\n         error: \"\"\n      })\n    } \n  }\n  catch (error){\n    alert(\"Please fill out form\");\n    return console.log(error);\n    }\n\n   \n  };\n  render() {\n    return(\n    <div className=\"container\">\n      <Heading/>\n      <div className=\"form\">\n      <Form loadWeather={this.getWeather}/></div>\n      <Forecast \n      temperature={this.state.temperature} \n      city={this.state.city}\n      country={this.state.country}\n      humidity={this.state.humidity}\n      pressure={this.state.pressure}\n      icon={this.state.icon}\n      description={this.state.description}\n      error={this.state.error}/></div>\n     )\n  }\n \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}